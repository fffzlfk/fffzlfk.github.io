<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.github.io/tags/rust/</link>
    <description>Recent content in Rust on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Feb 2022 23:21:12 +0800</lastBuildDate><atom:link href="https://fffzlfk.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>多线程及其性能刻画</title>
      <link>https://fffzlfk.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%85%B6%E6%80%A7%E8%83%BD%E5%88%BB%E7%94%BB/</link>
      <pubDate>Sun, 27 Feb 2022 23:21:12 +0800</pubDate>
      
      <guid>https://fffzlfk.github.io/posts/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8F%8A%E5%85%B6%E6%80%A7%E8%83%BD%E5%88%BB%E7%94%BB/</guid>
      <description>使用多线程提高并行性 同步的代价 我们研究对一列整数 $0, &amp;hellip;, n - 1$ 求和，我们将序列划分成 $t$ 个不相交的的区域，给 $t$ 个线程每个分配一个区域。将线程的和放入一个变量中，并且我们使用互斥锁来保护这个变量。
use std::{ sync::{Arc, Mutex}, thread, time::Instant, }; fn main() { let args = std::env::args().collect::&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;(); if args.len() != 3 { panic!(&amp;#34;Usage: {} &amp;lt;nthreads&amp;gt; &amp;lt;log_nelems&amp;gt;&amp;#34;, args[0]); } let nthreads: usize = args[1].parse().unwrap(); let log_nelems: usize = args[2].parse().unwrap(); let nelems = 1_usize &amp;lt;&amp;lt; log_nelems; let nelems_per_thread = nelems / nthreads; let gsum = Arc::new(Mutex::new(0)); let now = Instant::now(); let mut handlers = vec!</description>
    </item>
    
    <item>
      <title>CodeForces 762</title>
      <link>https://fffzlfk.github.io/posts/codeforces-762/</link>
      <pubDate>Sun, 26 Dec 2021 17:18:09 +0800</pubDate>
      
      <guid>https://fffzlfk.github.io/posts/codeforces-762/</guid>
      <description>Codeforces Round #762 (Div. 3)</description>
    </item>
    
  </channel>
</rss>
